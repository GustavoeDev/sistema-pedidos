services:
  productservice:
    build:
      context: ./products-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product_service_db:5432/product_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    depends_on:
      product_service_db:
        condition: service_healthy

  product_service_db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=product_service
    volumes:
      - product_service_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d product_service" ]
      interval: 5s
      timeout: 5s
      retries: 5


  costumersservice:
    build:
      context: ./costumers-service
      dockerfile: Dockerfile
    ports:
      - "8010:8000"
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,costumersservice
      - DATABASE_NAME=costumersservice
      - DATABASE_USER=admin
      - DATABASE_PASSWORD=admin
      - DATABASE_HOST=costumersservicedb
      - DATABASE_PORT=5432
    depends_on:
      costumersservicedb:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000

  costumersservicedb:
    image: postgres
    ports:
      - "5441:5432"
    environment:
      - POSTGRES_DB=costumersservice
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    volumes:
      - costumers_service_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d costumersservice" ]
      interval: 5s
      timeout: 5s
      retries: 5

  ordersservice:
    build:
      context: ./orders-service
      dockerfile: Dockerfile
    ports:
      - "8011:8000"
    environment:
      - DATABASE_NAME=ordersservice
      - DATABASE_USER=admin
      - DATABASE_PASSWORD=admin
      - DATABASE_HOST=ordersservicedb
      - DATABASE_PORT=5432
    depends_on:
      ordersservicedb:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000

  ordersservicedb:
    image: postgres
    ports:
      - "5440:5432"
    environment:
      - POSTGRES_DB=ordersservice
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    volumes:
      - orders_service_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d ordersservice" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  product_service_data: {}
  costumers_service_data: {}
  orders_service_data: {}